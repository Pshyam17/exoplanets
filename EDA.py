# -*- coding: utf-8 -*-
"""1. EDA (Kepler & TESS Data)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/yashvardhangupta37/1-eda-kepler-tess-data.55ac0595-cfa8-4062-8d5c-3df9ed1ca4d9.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20251001/auto/storage/goog4_request%26X-Goog-Date%3D20251001T234514Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D08a29ae9fd5d6576f7b540ba42a26c21ae9ef0bd831949d586201f995b5ccea9fb8ff110b944b99634bd4b0a3dccc90060b49427a9c24522b55985db6b6ba7e87bc44a2834f1ab86b49bed55190bda130c80ae25e80edb7dd3605306f2a90665fc612b157475804d09ecc190e8fc5ef97b7b964208a46c0d20706e7a6283e35fe1206c4b51b499884aa169cc5aad231a7eae5a392119f7ecf996c960a33e807281aaea48150181510c112f2554fc6d7787af4202664166b96b2e740ba162d7bf4ca00ad6ad29c4ea6f563e4af05a5c4dbfdd6aa85a2f6c380b51b63fbb3236d63ec7798968d293ccf71c8969f6281403ed391b3e3af579a2f42f8555676df30f
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

kepler_stellar = pd.read_csv("/kaggle/input/kepler-and-tess-exoplanet-data/keplerstellar_2025.02.03_04.41.47.csv", delimiter=";")

import csv

with open("/kaggle/input/kepler-and-tess-exoplanet-data/STELLARHOSTS_2025.02.03_06.11.17.csv", "r") as file:
    dialect = csv.Sniffer().sniff(file.read(2048))  # Analyze first 2048 bytes
    file.seek(0)  # Reset file pointer
    print(f"Detected delimiter: {dialect.delimiter}")

stellar_hosts = pd.read_csv("/kaggle/input/kepler-and-tess-exoplanet-data/STELLARHOSTS_2025.02.03_06.11.17.csv", delimiter=dialect.delimiter)

with open("/kaggle/input/kepler-and-tess-exoplanet-data/STELLARHOSTS_2025.02.03_06.11.17.csv", "r", encoding="utf-8") as file:
    for _ in range(10):
        print(file.readline())

stellar_hosts = pd.read_csv(
    "/kaggle/input/kepler-and-tess-exoplanet-data/STELLARHOSTS_2025.02.03_06.11.17.csv",
    comment="#"
)

print(stellar_hosts.head())

with open("/kaggle/input/kepler-and-tess-exoplanet-data/PS_2025.02.03_05.09.36.csv", "r", encoding="utf-8") as file:
    for _ in range(15):  # Print first 15 lines
        print(file.readline())

with open("/kaggle/input/kepler-and-tess-exoplanet-data/keplerstellar_2025.02.03_04.41.47.csv", "r", encoding="utf-8") as file:
    for i in range(20):  # Print first 20 lines
        print(i, file.readline().strip())

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")

# Load the datasets (replace with your actual paths)
kepler_stellar = pd.read_csv("/kaggle/input/kepler-and-tess-exoplanet-data/keplerstellar_2025.02.03_04.41.47.csv", delimiter=";")
stellar_hosts = pd.read_csv("/kaggle/input/kepler-and-tess-exoplanet-data/STELLARHOSTS_2025.02.03_06.11.17.csv", comment="#")
koi_table = pd.read_csv("/kaggle/input/kepler-and-tess-exoplanet-data/q1_q8_koi_2025.02.03_04.12.15.csv", delimiter=";")
tce_table = pd.read_csv("/kaggle/input/kepler-and-tess-exoplanet-data/q1_q17_dr25_tce_2025.02.03_04.32.18.csv", delimiter=";")
ps_table = pd.read_csv("/kaggle/input/kepler-and-tess-exoplanet-data/PS_2025.02.03_05.09.36.csv", comment="#")
fpp_table = pd.read_csv("/kaggle/input/kepler-and-tess-exoplanet-data/q1_q17_dr25_koifpp_2025.02.03_06.14.34.csv", delimiter=";")
toi_table = pd.read_csv("/kaggle/input/kepler-and-tess-exoplanet-data/TOI_2025.02.03_06.18.31.csv", delimiter=";")

# --- Data Overview ---
print("Kepler Stellar Data:")
print(kepler_stellar.info())
print(kepler_stellar.describe())

print("\nStellar Hosts Data:")
print(stellar_hosts.info())
print(stellar_hosts.describe())

print("\nKOI Data:")
print(koi_table.info())
print(koi_table.describe())

print("\nTCE Data:")
print(tce_table.info())
print(tce_table.describe())

print("\nPS Data (Confirmed Planets):")
print(ps_table.info())
print(ps_table.describe())

print("\nFPP Data:")
print(fpp_table.info())
print(fpp_table.describe())

print("\nTOI Data:")
print(toi_table.info())
print(toi_table.describe())

"""### Observations
1. Several datasets (`kepler_stellar`, `koi_table`, `tce_table`, `fpp_table`, `toi_table`) seem to have a single column containing metadata or comments rather than structured data. This usually occurs if the file is not parsed correctly due to incorrect delimiters or file formatting issues.

2. The `stellar_hosts` and `ps_table` datasets appear to have meaningful tabular data. We can explore these further for statistical analysis and visualization.

3. The column with metadata starts with a comment character (`#`) causing the entire file to be read as text instead of columns.

---
"""

# Reload with appropriate options
kepler_stellar = pd.read_csv("/kaggle/input/kepler-and-tess-exoplanet-data/keplerstellar_2025.02.03_04.41.47.csv",
                              skiprows=1, delimiter=",", comment="#")

koi_table = pd.read_csv("/kaggle/input/kepler-and-tess-exoplanet-data/q1_q8_koi_2025.02.03_04.12.15.csv",
                         skiprows=1, delimiter=",", comment="#")

tce_table = pd.read_csv("/kaggle/input/kepler-and-tess-exoplanet-data/q1_q17_dr25_tce_2025.02.03_04.32.18.csv",
                         skiprows=1, delimiter=",", comment="#")

fpp_table = pd.read_csv("/kaggle/input/kepler-and-tess-exoplanet-data/q1_q17_dr25_koifpp_2025.02.03_06.14.34.csv",
                         skiprows=1, delimiter=",", comment="#")

toi_table = pd.read_csv("/kaggle/input/kepler-and-tess-exoplanet-data/TOI_2025.02.03_06.18.31.csv",
                         skiprows=1, delimiter=",", comment="#")

# Verify the correct loading by checking the first few rows of each table
print("Kepler Stellar Data Sample:")
print(kepler_stellar.head())

print("\nKOI Table Sample:")
print(koi_table.head())

print("\nTCE Table Sample:")
print(tce_table.head())

print("\nFPP Table Sample:")
print(fpp_table.head())

print("\nTOI Table Sample:")
print(toi_table.head())

# --- Data Cleaning and Preprocessing (Examples) ---

# 1. Missing Values
print("\nMissing Values in KOI Table:")
print(koi_table.isnull().sum())  # Analyze missing data

# Imputation or removal (strategy depends on the specific column and amount of missing data)
# Example: Fill missing koi_prad with the median
koi_table['koi_prad'].fillna(koi_table['koi_prad'].median(), inplace=True)

# 2. Duplicate Entries (Check for duplicates in key columns like kepid)
print("\nDuplicate KOIs:")
print(koi_table.duplicated(subset='kepid').sum())
# koi_table.drop_duplicates(subset='kepid', keep='first', inplace=True)  # Example removal

# --- Exploratory Data Analysis (EDA) ---

# 1. Distributions of Key Variables

plt.figure(figsize=(10, 6))
sns.histplot(koi_table['koi_period'], bins=50, kde=True, color='skyblue')
plt.title('Distribution of KOI Orbital Periods')
plt.xlabel('Orbital Period (Days)')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(koi_table['koi_prad'], bins=50, kde=True, color='lightgreen')
plt.title('Distribution of KOI Radii')
plt.xlabel('Planetary Radius (Earth Radii)')
plt.ylabel('Frequency')
plt.show()

# 2. Relationships between Variables

plt.figure(figsize=(10, 6))
sns.scatterplot(x='koi_steff', y='koi_prad', data=koi_table, alpha=0.5, color='orange')
plt.title('Stellar Effective Temperature vs. Planetary Radius')
plt.xlabel('Stellar Effective Temperature (K)')
plt.ylabel('Planetary Radius (Earth Radii)')
plt.show()

# 3. Categorical Variables (Disposition)

plt.figure(figsize=(8, 6))
sns.countplot(x='koi_disposition', data=koi_table, palette='viridis')
plt.title('Distribution of KOI Dispositions')
plt.xlabel('KOI Disposition')
plt.ylabel('Count')
plt.show()

# Stellar Properties and Planet Characteristics

# Merge with stellar data
koi_stellar = pd.merge(koi_table, kepler_stellar, left_on='kepid', right_on='kepid', how='left')

# Explore relationships (e.g., stellar temperature vs. planet radius)
plt.figure(figsize=(10, 6))
sns.scatterplot(x='koi_steff', y='koi_prad', data=koi_stellar, hue='koi_disposition', alpha=0.5)  # Added hue
plt.title('Stellar Temperature vs. Planetary Radius (Colored by Disposition)')
plt.xlabel('Stellar Effective Temperature (K)')
plt.ylabel('Planetary Radius (Earth Radii)')
plt.show()

print(koi_table.columns)

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# ... (Load your DataFrame)

# Check for missing values in ALL koi_fpflag columns
fp_flags = ['koi_fpflag_nt', 'koi_fpflag_ss', 'koi_fpflag_co', 'koi_fpflag_ec']
for flag in fp_flags:
    print(f"Missing values in {flag}:")
    print(koi_table[flag].isnull().all())  # True if ALL values are NaN
    print(koi_table[flag].isnull().sum())   # Number of NaN values

# Handle missing values (fill with 'Unknown' for all flags)
koi_table['koi_disposition'].fillna('Unknown', inplace=True)
for flag in fp_flags:
    koi_table[flag].fillna('Unknown', inplace=True)  # Fill NaN with 'Unknown'

# Convert to correct data types (all flags should be strings)
koi_table['koi_disposition'] = koi_table['koi_disposition'].astype(str)
for flag in fp_flags:
    koi_table[flag] = koi_table[flag].astype(str)  # Convert all flags to string

# Replot ALL plots (now they should work)
plt.figure(figsize=(10, 6))
sns.countplot(x='koi_disposition', hue='koi_fpflag_nt', data=koi_table)
plt.title('KOI Disposition by Number of Transits (nt)')
plt.show()

plt.figure(figsize=(10, 6))
sns.countplot(x='koi_disposition', hue='koi_fpflag_ss', data=koi_table)
plt.title('KOI Disposition by Shape Match Flag (ss)')
plt.show()

plt.figure(figsize=(10, 6))
sns.countplot(x='koi_disposition', hue='koi_fpflag_co', data=koi_table)
plt.title('KOI Disposition by Centroid Offset Flag (co)')
plt.show()

plt.figure(figsize=(10, 6))
sns.countplot(x='koi_disposition', hue='koi_fpflag_ec', data=koi_table)
plt.title('KOI Disposition by Ephemeris Match Flag (ec)')
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# ... (Load your DataFrames as before, ensuring they are loaded correctly)

# --- 2. Combining Stellar and KOI Data (Advanced) ---

# Stellar Temperature vs. Planet Radius (with log scale for radius)
plt.figure(figsize=(10, 6))
sns.scatterplot(x='teff', y='koi_prad', data=koi_stellar, hue='koi_disposition', alpha=0.5)
plt.title('Stellar Temperature vs. Planetary Radius (Log Scale for Radius)')
plt.xlabel('Stellar Effective Temperature (K)')
plt.ylabel('Planetary Radius (Earth Radii)')
plt.yscale('log')  # Use a logarithmic scale for the y-axis (radius)
plt.show()

# --- 3. Feature Engineering (Advanced) ---

# Create a combined feature:  Habitability Score (example)
# (This is a very simplified example and would need to be refined for real analysis)
koi_stellar['habitability_score'] = (1 / (koi_stellar['koi_period'] - 100)**2) * (1 / (koi_stellar['teff'] - 5500)**2)  # Example formula

plt.figure(figsize=(10, 6))
sns.histplot(koi_stellar['habitability_score'], bins=50, kde=True, color='forestgreen')
plt.title('Distribution of Habitability Score')
plt.xlabel('Habitability Score')
plt.ylabel('Frequency')
plt.show()

# --- 4. Working with the Confirmed Planets (ps_table) ---

if not ps_table.empty:
    # Planet Radius vs. Stellar Temperature for Confirmed Planets
    plt.figure(figsize=(10, 6))
    sns.scatterplot(x='st_teff', y='pl_rade', data=ps_table, alpha=0.5)
    plt.title('Stellar Temperature vs. Confirmed Planet Radius')
    plt.xlabel('Stellar Effective Temperature (K)')
    plt.ylabel('Planet Radius (Earth Radii)')
    plt.show()

    # Distribution of Planet Types (based on radius ranges - example)
    def categorize_planet_size(radius):
        if radius < 2:
            return "Small (< 2 Earth radii)"
        elif radius < 6:
            return "Medium (2-6 Earth radii)"
        else:
            return "Large (> 6 Earth radii)"

    ps_table['planet_size_category'] = ps_table['pl_rade'].apply(categorize_planet_size)

    plt.figure(figsize=(8, 6))
    sns.countplot(x='planet_size_category', data=ps_table, palette='Set3')
    plt.title('Distribution of Confirmed Planet Sizes')
    plt.xlabel('Planet Size Category')
    plt.ylabel('Count')
    plt.show()