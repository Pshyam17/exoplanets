# -*- coding: utf-8 -*-
"""2. Lightkurves API (Kepler & TESS Data)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/yashvardhangupta37/2-lightkurves-api-kepler-tess-data.ef237528-2a73-4ac6-a246-4eef38652dbf.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20251001/auto/storage/goog4_request%26X-Goog-Date%3D20251001T234646Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D831106100a42563ec877b7ca514926ce101493547e03afd9498a70138944d4dded5a3d2a416b8f59da433ac553606a59c79b69a1f07cb44fd4445a7c8c44e48c19b30fcdcd479d4ac23b6c2047584c3ade8b0ba9c27f2d2870ec3b9b1ba9c3412e6ac3dfa364c817101414b0adfa428922120d1c4835d40d723b808392f7fa8f6a5cfee83c9f498c1e40460fe64f0f356b3534c01a6dbfb1d7b6241da5470381629d3984a5584f9a5a682bdb2a4acaecda15104cd399d8c404d20b77d574d976808a48fc3f8549a8333787e8ef5e1f1d3419e30de011efe5205c66bfefcc23439b63db4394363d3e13eaba5551c6af58944742a43918dc6029220e2e03f209dc
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt
import seaborn as sns

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

"""Collection of datasets related to exoplanet discoveries from the **Kepler** and **TESS** space telescopes:

---

### **1. `q1_q8_koi_2025.02.03_04.12.15.csv`**  
   - **KOI (Kepler Object of Interest) catalog** from **Quarters 1-8** of Kepler's observations.  
   - Contains candidate exoplanets identified in the first eight quarters of the Kepler mission.  
   - Expected columns:
     - `kepid` (Kepler ID of the star)  
     - `kepoi_name` (KOI designation)  
     - `koi_disposition` (e.g., Candidate, False Positive, Confirmed)  
     - `koi_period` (orbital period in days)  
     - `koi_prad` (planetary radius in Earth radii)  
     - `koi_teq` (equilibrium temperature)  
     - `koi_sma` (semi-major axis of the orbit)  

---

### **2. `q1_q17_dr25_tce_2025.02.03_04.32.18.csv`**  
   - **Threshold Crossing Events (TCEs) from Q1-Q17 DR25** (Final Kepler Data Release 25).  
   - Contains all detected transit-like signals before they are classified as exoplanets, false positives, or noise.  
   - Expected columns:
     - `tce_plnt_num` (TCE number for a given star)  
     - `tce_period` (orbital period)  
     - `tce_time0bk` (epoch of first transit)  
     - `tce_duration` (transit duration)  
     - `tce_depth` (transit depth, indicating planet size)  

---

### **3. `TOI_2025.02.03_06.18.31.csv`**  
   - **TESS Objects of Interest (TOI)**, a list of planet candidates from the **TESS (Transiting Exoplanet Survey Satellite)** mission.  
   - TOIs are similar to KOIs but discovered by TESS instead of Kepler.  
   - Expected columns:
     - `toi_id` (TESS Object of Interest ID)  
     - `tic_id` (TESS Input Catalog ID for the host star)  
     - `toi_period` (orbital period in days)  
     - `toi_radius` (planet radius)  
     - `toi_disposition` (Candidate, Confirmed, False Positive)  

---

### **4. `STELLARHOSTS_2025.02.03_06.11.17.csv`**  
   - Catalog of **host stars** for the exoplanets in the dataset.  
   - Expected columns:
     - `star_id` (Unique identifier for the star, e.g., Kepler ID or TIC ID)  
     - `ra`, `dec` (Right Ascension and Declination)  
     - `teff` (Effective temperature of the star)  
     - `radius` (Stellar radius)  
     - `logg` (Surface gravity)  
     - `metallicity` (Metal content of the star)  

---

### **5. `q1_q17_dr25_koifpp_2025.02.03_06.14.34.csv`**  
   - **KOI False Positive Probabilities (FPP)** from Kepler's **final data release (DR25)**.  
   - Provides statistical estimates of how likely each Kepler candidate is to be a real planet.  
   - Expected columns:
     - `kepid` (Kepler ID of the star)  
     - `koi_fp_prob` (False positive probability)  
     - `koi_disposition` (Candidate, False Positive, Confirmed)  

---

### **6. `keplerstellar_2025.02.03_04.41.47.csv`**  
   - **Kepler Stellar Catalog**, providing parameters for all stars observed by Kepler.  
   - Similar to `STELLARHOSTS` but specific to **Kepler's dataset**.  
   - Expected columns:
     - `kepid` (Kepler ID)  
     - `teff` (Stellar temperature)  
     - `logg` (Surface gravity)  
     - `radius` (Stellar radius)  
     - `mass` (Stellar mass)  

---

### **7. `PS_2025.02.03_05.09.36.csv`**  
   - **Planetary Systems Catalog (PS)** from sources like **NASA Exoplanet Archive** or **Exoplanet.eu**.  
   - Contains a list of all known exoplanets, including discoveries from Kepler, TESS, ground-based telescopes, and other space missions.  
   - Expected columns:
     - `pl_name` (Planet Name)  
     - `hostname` (Host Star Name)  
     - `pl_orbper` (Orbital Period)  
     - `pl_rade` (Planet Radius in Earth radii)  
     - `pl_masse` (Mass in Earth masses, if available)  

---

### **Summary**  
The datasets come from major exoplanet detection projects:
1. **Kepler** (Q1-Q8, Q1-Q17 DR25, KOI, and stellar data).  
2. **TESS** (TOI catalog).  
3. **Host Star Properties** (STELLARHOSTS & Kepler Stellar catalog).  
4. **False Positive Analysis** (KOI FPP).  
5. **A General Exoplanet Database** (PS dataset).  
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")

# Load the datasets (replace with your actual paths)
kepler_stellar = pd.read_csv("/kaggle/input/kepler-and-tess-exoplanet-data/keplerstellar_2025.02.03_04.41.47.csv",
                              skiprows=1, delimiter=",", comment="#")
stellar_hosts = pd.read_csv("/kaggle/input/kepler-and-tess-exoplanet-data/STELLARHOSTS_2025.02.03_06.11.17.csv", comment="#")

koi_table = pd.read_csv("/kaggle/input/kepler-and-tess-exoplanet-data/q1_q8_koi_2025.02.03_04.12.15.csv",
                         skiprows=1, delimiter=",", comment="#")

tce_table = pd.read_csv("/kaggle/input/kepler-and-tess-exoplanet-data/q1_q17_dr25_tce_2025.02.03_04.32.18.csv",
                         skiprows=1, delimiter=",", comment="#")

ps_table = pd.read_csv("/kaggle/input/kepler-and-tess-exoplanet-data/PS_2025.02.03_05.09.36.csv", comment="#")

fpp_table = pd.read_csv("/kaggle/input/kepler-and-tess-exoplanet-data/q1_q17_dr25_koifpp_2025.02.03_06.14.34.csv",
                         skiprows=1, delimiter=",", comment="#")

toi_table = pd.read_csv("/kaggle/input/kepler-and-tess-exoplanet-data/TOI_2025.02.03_06.18.31.csv",
                         skiprows=1, delimiter=",", comment="#")

# --- Data Overview ---
print("Kepler Stellar Data:")
print(kepler_stellar.info())
print(kepler_stellar.describe())

print("\nStellar Hosts Data:")
print(stellar_hosts.info())
print(stellar_hosts.describe())

print("\nKOI Data:")
print(koi_table.info())
print(koi_table.describe())

print("\nTCE Data:")
print(tce_table.info())
print(tce_table.describe())

print("\nPS Data (Confirmed Planets):")
print(ps_table.info())
print(ps_table.describe())

print("\nFPP Data:")
print(fpp_table.info())
print(fpp_table.describe())

print("\nTOI Data:")
print(toi_table.info())
print(toi_table.describe())

# Display sample data
koi_table.head()

#!pip install lightkurve --quiet

import lightkurve as lk
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

def download_and_plot_lightcurve(kepid, koi_name, koi_period=None):
    """
    Downloads and plots the Kepler light curve for a given KOI.
    If a planet's orbital period is provided, it will also fold the light curve.
    """
    try:
        # Search for light curves using KOI name first
        search_result = lk.search_lightcurve(koi_name)

        if len(search_result) == 0:
            # If no results, search using Kepler ID
            search_result = lk.search_lightcurve(f"KIC {kepid}")

        if len(search_result) == 0:
            print(f"No light curve found for KOI {koi_name} (KIC {kepid})")
            return None

        # Download all available light curves
        lc_collection = search_result.download_all()

        if lc_collection is None:
            print(f"Failed to download light curve for KOI {koi_name} (KIC {kepid})")
            return None

        # Stitch multiple quarters together (if available)
        lc = lc_collection.stitch() if len(lc_collection) > 1 else lc_collection[0]

        # Plot the raw light curve
        lc.plot(title=f"Light Curve for KOI {koi_name} (KIC {kepid})", xlabel="Time (days)", ylabel="Flux")
        plt.show()

        # If an orbital period is provided, fold the light curve
        if koi_period:
            folded_lc = lc.fold(period=koi_period)
            folded_lc.plot(title=f"Phase-Folded Light Curve for KOI {koi_name}")
            plt.show()

        return lc

    except Exception as e:
        print(f"Error processing KOI {koi_name} (KIC {kepid}): {e}")
        return None

# Select a sample CONFIRMED exoplanet candidate
koi_sample = koi_table[koi_table["koi_disposition"] == "CONFIRMED"].iloc[0]

# Extract Kepler ID, KOI Name, and Orbital Period
kepid = koi_sample["kepid"]
koi_name = koi_sample["kepoi_name"]
koi_period = koi_sample["koi_period"]

# Download and analyze the light curve
lc = download_and_plot_lightcurve(kepid, koi_name, koi_period)

lc_clean = lc.remove_outliers(sigma=5)  # Remove extreme values (5-sigma clipping)
lc_clean.plot(title="Cleaned Light Curve")

from astropy.timeseries import BoxLeastSquares
import matplotlib.pyplot as plt

# Define the transit search
bls = BoxLeastSquares(lc_clean.time, lc_clean.flux)

# Compute periodogram over a range of periods (0.5 to 100 days)
periods = np.linspace(0.5, 100, 5000)
bls_power = bls.power(periods, duration=0.1)

# Find the best period (highest power)
best_period = periods[np.argmax(bls_power.power)]
print(f"Detected Period: {best_period:.3f} days")

# Plot the BLS periodogram
plt.plot(periods, bls_power.power)
plt.xlabel("Period (days)")
plt.ylabel("BLS Power")
plt.title("BLS Periodogram")
plt.show()

import matplotlib.pyplot as plt

# Fold the light curve using the detected period
folded_lc = lc_clean.fold(period=best_period)

# Convert TimeDelta to float values for plotting
time_values = folded_lc.time.value  # Convert TimeDelta to phase values (floats)

# Plot the folded light curve
plt.figure(figsize=(10, 5))
plt.plot(time_values, folded_lc.flux, '.', markersize=1, label="Folded Data")
plt.xlabel("Phase (days)")
plt.ylabel("Normalized Flux")
plt.title(f"Folded Light Curve (Period: {best_period:.3f} days)")
plt.legend()
plt.show()

# Find planets with similar radii
similar_planets = koi_table[(koi_table["koi_prad"] > 1) & (koi_table["koi_prad"] < 2)]
print(similar_planets[["kepoi_name", "koi_prad", "koi_period"]])

"""### **🔍 What Did We Just Discover?**  

We've successfully:  
✅ **Found similar exoplanets** based on radius (`1 < koi_prad < 2` Earth radii).  
✅ **Checked the False Positive Probability (FPP)** for KIC 9388479 (Kepler-732 c).  
✅ **Compared with the TESS TOI Catalog** to see if TESS has observed this system.  

---

## **📌 Key Findings**
### **1️⃣ Finding Similar Planets**
Searched for planets with **radii between 1 and 2 Earth radii** returned **1,339 planets**.  

- Kepler-732 c (**K00936.02**) has a **radius of 1.47 Earth radii** and **orbital period of 0.893 days**.  
- Many other planets in this range have orbital periods between **1-10 days**, suggesting they may be **Super-Earths or Mini-Neptunes** in close orbits.  
"""

fpp_table[fpp_table["kepid"] == 9388479]

"""---

### **2️⃣ Checking the False Positive Probability (FPP)**
For **KIC 9388479 (Kepler-732 c)**, we found **two KOIs** with very **low false positive probabilities (FPP)**:

| KOI Name  | Orbital Period (days) | Radius (Earth radii) | False Positive Probability (FPP) |
|-----------|----------------|----------------|---------------------|
| **K00936.01** | 9.468  | 2.22 | **0.000005 (0.0005%)** |
| **K00936.02** | 0.893  | 1.29 | **0.000013 (0.0013%)** |

**🧐 What Does This Mean?**  
✅ **Extremely low FPP values** indicate that **both planets are highly likely real exoplanets**.  
✅ **K00936.02 (Kepler-732 c)** is confirmed with **99.999% confidence**!  
"""

toi_table[toi_table["ra"].round(2) == koi_sample["ra"].round(2)]

"""### **3️⃣ Checking if TESS Re-Observed the System**
You checked if **TESS (Transiting Exoplanet Survey Satellite)** has observed Kepler-732 (KIC 9388479).  

🚨 **Result: No Matching TOI Found**  
TESS **has NOT re-observed this system**.  

**🧐 Why is This Important?**  
- If a **TESS Object of Interest (TOI)** matched, it would mean **TESS confirmed Kepler-732 c** as a planet.  
- The fact that it **doesn’t appear** in TESS data means:
  - Either **TESS didn’t observe this part of the sky**, or  
  - The transit signal **wasn’t strong enough for TESS to detect**.

**🧐 What to Do Next?**  
🔹 **Plot a histogram** of orbital periods for these planets to see if there’s a common trend:  

🔹 This helps see if planets of similar size tend to **cluster around certain orbital periods**.
"""

import seaborn as sns

plt.figure(figsize=(10, 5))
sns.histplot(similar_planets["koi_period"], bins=30, kde=True)
plt.xlabel("Orbital Period (days)")
plt.ylabel("Number of Planets")
plt.title("Distribution of Orbital Periods for Super-Earths (1-2 R⊕)")
plt.show()

"""**🔹 What Next?**  
Compare these planets to **KOIs with high FPP values (>10%)** to see what distinguishes them:

This can help understand **what makes a planet candidate more likely a false positive**.

---
"""

# Find KOIs with high FPP (>10%)
high_fpp_planets = fpp_table[fpp_table["fpp_prob"] > 0.1]
print(high_fpp_planets[["kepoi_name", "fpp_koi_period", "fpp_prad", "fpp_prob"]])

"""**🔹 What Next?**  
Try finding TESS observations of **similar planets**:

This will help find **other TESS-confirmed Super-Earths**.

---
"""

# Find TESS planets with similar radii (1-2 R⊕)
similar_tess_planets = toi_table[(toi_table["st_rad"] > 1) & (toi_table["st_rad"] < 2)]
print(similar_tess_planets[["toi", "ra", "dec", "st_rad", "st_logg"]])

"""## **🚀 Summary of the key Steps**
| ✅ Task  | 🔍 What to Do Next? |
|---------|----------------|
| **Find Similar Planets** | Plot a histogram of orbital periods for **Super-Earths (1-2 R⊕)** |
| **Analyze FPP** | Compare with high-FPP KOIs to see why some planets are false positives |
| **Check for TESS Observations** | Search for **similar planets observed by TESS** |

---

## **🔥 Final Thought**
We have taken a **real exoplanet candidate** (Kepler-732 c), analyzed its light curve, confirmed its authenticity, and checked for follow-up observations.  

🚀 Now we can **expand this analysis** to more planets and even predict **new exoplanets** using machine learning!
"""

sns.histplot(koi_table[koi_table["koi_disposition"] == "CONFIRMED"]["koi_period"], bins=30, kde=True, color="blue", label="Confirmed")
sns.histplot(koi_table[koi_table["koi_disposition"] == "CANDIDATE"]["koi_period"], bins=30, kde=True, color="red", alpha=0.5, label="Candidates")
plt.xlabel("Orbital Period (days)")
plt.ylabel("Number of Planets")
plt.title("Comparison of Confirmed vs. Candidate Planets by Period")
plt.legend()
plt.show()

sns.boxplot(x=pd.cut(high_fpp_planets["fpp_prad"], bins=[0,1,2,5,10,20,50]), y=high_fpp_planets["fpp_prob"])
plt.xlabel("Planet Radius (Earth radii)")
plt.ylabel("False Positive Probability (FPP)")
plt.title("FPP vs. Planet Size")
plt.show()

low_fpp_confirmed = fpp_table[(fpp_table["fpp_prob"] < 0.01) & (koi_table["koi_disposition"] == "CONFIRMED")]
print(low_fpp_confirmed[["kepoi_name", "fpp_koi_period", "fpp_prad", "fpp_prob"]])

merged_catalog = pd.merge(koi_table, toi_table, left_on="ra", right_on="ra", suffixes=('_kepler', '_tess'))
print(merged_catalog[["kepoi_name", "toi", "koi_prad", "st_rad", "koi_period"]])

import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

# ... (code to load toi_table and koi_table)

print(toi_table.columns) # Check the column names
print(toi_table.dtypes) # Check data types

if "toi_period" in toi_table.columns: # Check if "toi_period" exists
    toi_table["toi_period"] = pd.to_numeric(toi_table["toi_period"], errors='coerce')  # Convert to numeric
    toi_table_cleaned = toi_table.dropna(subset=["toi_period"])  # Remove rows with NaN toi_period
    sns.histplot(toi_table_cleaned["toi_period"], bins=30, kde=True, color="green", label="TESS Planets")
else:
    print("Error: 'toi_period' column not found in toi_table.")

if "koi_period" in koi_table.columns: # Check if "koi_period" exists
    koi_table["koi_period"] = pd.to_numeric(koi_table["koi_period"], errors='coerce')  # Convert to numeric
    koi_table_cleaned = koi_table.dropna(subset=["koi_period"])  # Remove rows with NaN koi_period
    sns.histplot(koi_table_cleaned["koi_period"], bins=30, kde=True, color="blue", alpha=0.5, label="Kepler Planets")
else:
    print("Error: 'koi_period' column not found in koi_table.")

plt.xlabel("Orbital Period (days)")
plt.ylabel("Number of Planets")
plt.title("TESS vs. Kepler Orbital Period Distribution")
plt.legend()
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

# ... (code to load toi_table and koi_table)

print(toi_table.columns)  # Check the column names (you already did this - keep it for debugging)
print(toi_table.dtypes)   # Check data types (important!)

# Correct the column name and handle potential missing data and type conversion
if "pl_orbper" in toi_table.columns:
    toi_table["pl_orbper"] = pd.to_numeric(toi_table["pl_orbper"], errors='coerce')
    toi_table_cleaned = toi_table.dropna(subset=["pl_orbper"])  # Use "pl_orbper"
    sns.histplot(toi_table_cleaned["pl_orbper"], bins=30, kde=True, color="green", label="TESS Planets")
else:
    print("Error: 'pl_orbper' column not found in toi_table.")

if "koi_period" in koi_table.columns:  # Assuming koi_table still has "koi_period"
    koi_table["koi_period"] = pd.to_numeric(koi_table["koi_period"], errors='coerce')
    koi_table_cleaned = koi_table.dropna(subset=["koi_period"])
    sns.histplot(koi_table_cleaned["koi_period"], bins=30, kde=True, color="blue", alpha=0.5, label="Kepler Planets")
else:
    print("Error: 'koi_period' column not found in koi_table.")


plt.xlabel("Orbital Period (days)")
plt.ylabel("Number of Planets")
plt.title("TESS vs. Kepler Orbital Period Distribution")
plt.legend()
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

# ... (code to load and clean the data)

sns.kdeplot(toi_table_cleaned["pl_orbper"], color="green", label="TESS Planets", fill=True)  # Added fill
sns.kdeplot(koi_table_cleaned["koi_period"], color="blue", label="Kepler Planets", fill=True, alpha=0.5) # Added fill and alpha
plt.xlabel("Orbital Period (days)")
plt.ylabel("Density")  # Changed y-axis label
plt.title("TESS vs. Kepler Orbital Period Distribution (KDE)")
plt.legend()
plt.xscale('log') # Log scale for x-axis
plt.show()

def ecdf(data):  # Helper function for ECDF
    """Compute ECDF for a one-dimensional array of measurements."""
    n = len(data)
    x = np.sort(data)
    y = np.arange(1, n + 1) / n
    return x, y

# ... (data loading and cleaning)

x_tess, y_tess = ecdf(toi_table_cleaned["pl_orbper"])
x_kepler, y_kepler = ecdf(koi_table_cleaned["koi_period"])

plt.plot(x_tess, y_tess, marker='.', linestyle='none', color="green", label="TESS Planets")
plt.plot(x_kepler, y_kepler, marker='.', linestyle='none', color="blue", label="Kepler Planets")
plt.xlabel("Orbital Period (days)")
plt.ylabel("Cumulative Probability")
plt.title("TESS vs. Kepler Orbital Period Distribution (ECDF)")
plt.legend()
plt.xscale('log') # Log scale for x-axis
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(10, 5))
sns.scatterplot(
    data=low_fpp_confirmed,
    x="fpp_koi_period",
    y="fpp_prad",
    hue="fpp_prob",
    palette="coolwarm",
    edgecolor="black"
)
plt.xscale("log")  # Log scale for better visualization of long-period planets
plt.xlabel("Orbital Period (days)")
plt.ylabel("Planet Radius (Earth radii)")
plt.title("Low FPP Confirmed Planets: Period vs. Radius")
plt.legend(title="False Positive Probability (FPP)")
plt.show()

earth_like_planets = low_fpp_confirmed[(low_fpp_confirmed["fpp_prad"] < 2) & (low_fpp_confirmed["fpp_koi_period"] > 10) & (low_fpp_confirmed["fpp_koi_period"] < 200)]
print(earth_like_planets[["kepoi_name", "fpp_koi_period", "fpp_prad", "fpp_prob"]])

import pandas as pd

# ... (load DataFrames)

# Clean the data before merging
low_fpp_confirmed["kepoi_name"] = low_fpp_confirmed["kepoi_name"].str.strip().str.lower()
toi_table["toi"] = toi_table["toi"].astype(str).str.strip().str.lower() #Convert to string and clean


merged_candidates = pd.merge(low_fpp_confirmed, toi_table, left_on="kepoi_name", right_on="toi", how="inner")

if merged_candidates.empty: #Check if the merged dataframe is empty
     print("No common entries found after cleaning")
else:
    print(merged_candidates[["kepoi_name", "toi", "fpp_koi_period", "fpp_prad", "st_rad"]])

import lightkurve as lk

kepoi_name = "K00420.01"  # Pick a top confirmed planet
kepid = koi_table[koi_table["kepoi_name"] == kepoi_name]["kepid"].values[0]

lc = lk.search_lightcurve(f"KIC {kepid}").download().normalize()
lc.plot(title=f"Light Curve for {kepoi_name}")

lc_clean = lc.remove_outliers(sigma=5)  # Remove extreme values (5-sigma clipping)
lc_clean.plot(title=f"Cleaned Light Curve for {kepoi_name}")

# Extract the planet's period from koi_table
koi_period = koi_table[koi_table["kepoi_name"] == kepoi_name]["koi_period"].values[0]

# Phase-fold the light curve
folded_lc = lc_clean.fold(period=koi_period)
folded_lc.plot(title=f"Phase-Folded Light Curve for {kepoi_name}")

# Find planets with similar radii
similar_planets = koi_table[(koi_table["koi_prad"] > 3) & (koi_table["koi_prad"] < 5)]
print(similar_planets[["kepoi_name", "kepid", "koi_prad", "koi_period"]])

sns.boxplot(data=fpp_table, x=pd.cut(fpp_table["fpp_prad"], bins=[0,1,2,5,10,20,50]), y=fpp_table["fpp_prob"])
plt.xlabel("Planet Radius (Earth radii)")
plt.ylabel("False Positive Probability (FPP)")
plt.title("FPP vs. Planet Size")
plt.show()
